name: Django CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

jobs:
  BuildAndTest:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.10.1]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Check python version
        run: |
          python --version

      - name: cache pipenv
        id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs/
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install pipenv
#        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        uses: dschep/install-pipenv-action@v1

      - name: Pipenv install dependencies
        run: |
          pipenv install

      - name: Pipenv check dependencies
        run: |
          pipenv graph

      - name: Check pipenv environment
        run: |
          pipenv --version
          pipenv --where
          pipenv --venv

      - uses: ricardochaves/python-lint@v1.4.0
        with:
          python-root-list: ""
          use-pylint: false
          use-pycodestyle: false
          use-flake8: true
          use-black: false
          use-mypy: false
          use-isort: false
          extra-flake8-options: "--tee --output-file=/github/workspace/flake8.txt"

      - name: Run Django migrations
        run: |
          pipenv run python manage.py migrate --settings=config.settings.test
        env:
          DJANGO_ENV: test
      - name: Django test
        run: |
          pipenv run python manage.py test --settings=config.settings.test
        env:
          DJANGO_ENV: test

      - name: Download clean repo for SonarQube analysis
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          clean: false

      - name: SonarCloud Scan && Upload
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=sergiuszkotecki
            -Dsonar.projectKey=SergiuszKotecki_petter
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.sources=.
            -Dsonar.test.exclusions=manage.py
            -Dsonar.projectName=petter
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.language=py
            -Dsonar.python.coverage.reportPaths=coverage/xml/*coverage*.xml
            -Dsonar.python.flake8.reportPaths=/github/workspace/flake8.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
